<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="TP.Service.VirtualService">
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.SOAP.GenericService</Super>
<TimeCreated>62341,81962.678718</TimeCreated>

<Parameter name="SERVICENAME">
<Default>TP.Service.VirtualService</Default>
</Parameter>

<Parameter name="ADAPTER">
<Default>EnsLib.SOAP.InboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter ADAPTER;

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Default>Validation</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec><![CDATA[pRequestBody:%CharacterStream,pResponseBody:%CharacterStream,&pAction:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC As %Status
	#Dim tException As %Exception.SystemException
	
	Set tSC = $$$OK
	
	Try {
	 	#Dim tResponse As TP.Message.SOAPResponse
		
		// Handling for chuncked
		Set %SplitBody = 1
		
		Set pResponseBody=$$$NULLOREF
		Set tRequest=##class(TP.Message.SOAPRequest).%New(pRequestBody,,"%iaHeader",pRequestBody.GetAttribute("EnvelopeStream"),,##class(EnsLib.EDI.XML.Document).%New(..ImportHandler))
		Set tSC=..resolveAndIndex(tRequest)
		If ($$$ISERR(tSC)) { Quit }
		
		Set tUrl = tRequest.HTTPHeaders.GetAt("URL")		
		
		//Get SOAP Header
		#Dim txPath As %XML.XPATH.Document
		#Dim txPathRes As %XML.XPATH.ValueResult
		#Dim tList As %ListOfObjects
		#Dim tSoapHeaderTo As %String
		#Dim tSoapHeaderFrom As %String
		#Dim tWsaTo As %String
		#Dim tWsaFrom As %String
		#Dim tLogicalAddress As %String
		
		Set tSoapHeaderTo = ""
		Set tSoapHeaderFrom = ""
		Set tWsaTo = ""
		Set tWsaFrom = ""
		Set tRequest.SOAPAction = ""
		Set tLogicalAddress = ""
		
		//Get SOAP Action from HTTP header
		If (tRequest.HTTPHeaders.GetAt("soapaction") '= "") {
			Set tRequest.SOAPAction = $REPLACE(tRequest.HTTPHeaders.GetAt("soapaction"), $Char(34), "")
			$$$TRACE("Value from HTTP Header soapaction: " _ tRequest.SOAPAction)
		}
		
		Set tSC = ##class(%XML.XPATH.Document).CreateFromStream(tRequest.EnvelopeStream, .txPath)
		
		//Get SOAP Header To
		Set txPath.PrefixMappings = ""
		Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/To", "text()", .tList)
		If (tList.Count() > 0) {
			Set txPathRes = tList.GetAt(1)
			Set tSoapHeaderTo = txPathRes.Value
			
			$$$TRACE("Value from SOAP Header To: " _ tSoapHeaderTo)
		}
		
		//Get SOAP Header From
		Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/From", "text()", .tList)
		If (tList.Count() > 0) {
			Set txPathRes = tList.GetAt(1)
			Set tSoapHeaderFrom = txPathRes.Value
			
			$$$TRACE("Value from SOAP Header From " _ tSoapHeaderFrom)
		}
		
		//Get LogicalAddress from SOAP header
		Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/*[local-name()='LogicalAddress']", "text()", .tList)
		If (tList.Count() > 0) {
			Set txPathRes = tList.GetAt(1)
			Set tLogicalAddress = txPathRes.Value
			
			$$$TRACE("Value from SOAP Header LogicalAddress: " _ tLogicalAddress)
		}
		
		//Get prefix and namespace for root namespace from Body
		#Dim txPathBody As %XML.XPATH.Document
		#Dim txPathBodyRes As %XML.XPATH.ValueResult
		#Dim tListBody As %ListOfObjects
		#Dim tBodyPrefix As %String
		#Dim tBodyNamespace As %String
		
		Set tSC = ##class(%XML.XPATH.Document).CreateFromStream(tRequest.Stream, .txPathBody)
		Set txPathBody.PrefixMappings = "soapenv http://schemas.xmlsoap.org/soap/envelope/"
		
		//Get prefix
		Set tBodyPrefix = ""
		Set tSC = txPathBody.EvaluateExpression("/soapenv:Body/*", "name()", .tListBody)
		If (tListBody.Count() > 0) {
			Set txPathBodyRes = tListBody.GetAt(1)
			If ($FIND(txPathBodyRes, ":") > 0) {
				Set tBodyPrefix = $PIECE(txPathBodyRes.Value, ":", 1)
			}
			
			$$$TRACE("Value from SOAP Body prefix " _ tBodyPrefix)
		}
		
		//Get namespace
		If (tBodyPrefix '= "") {
			Set tSC = txPathBody.EvaluateExpression("/soapenv:Body/*", "namespace::" _ tBodyPrefix, .tListBody)
		}
		Else {
			Set tSC = txPathBody.EvaluateExpression("/soapenv:Body/*", "namespace-uri()", .tListBody)
		}
		If (tListBody.Count() > 0) {
			Set txPathBodyRes = tListBody.GetAt(1)
			Set tBodyNamespace = txPathBodyRes.Value
			Set tRequest.SOAPNamespace = txPathBodyRes.Value
			
			$$$TRACE("Value from SOAP Body root namespace " _ tRequest.SOAPNamespace)
		}
		
		/*************
		IIS
		**************/
		
		//Get original url from ARR x-original-url HTTP header
		//This header is used to create the correct SOAP namespace
		#Dim tOriginalURL As %String
		#Dim tRivVersion As %String
		Set tOriginalURL = ""
		Set tRivVersion = ""
		If (tRequest.HTTPHeaders.GetAt("x-original-url") '= "") {
			//IIS, Apache
			Set tOriginalURL = $REPLACE(tRequest.HTTPHeaders.GetAt("x-original-url"), $Char(34), "")
			
		        //Set tRequest.SOAPNamespace = $REPLACE($REPLACE(tOriginalURL,"/csp/","urn:riv:crm:"),"/",":")
		        //$$$TRACE("Value from HTTP Header x-original-url: " _ tRequest.SOAPNamespace)
		}
		$$$LOGINFO("OrigURL: " _ tOriginalURL)
		Set tRequest.OriginalURL = tOriginalURL
		If (tOriginalURL '= "") {
			Set list = $LISTFROMSTRING(tOriginalURL, "/")
			For i=1:1:$LISTLENGTH(list) {
				If ($ZCONVERT($EXTRACT($LIST(list, i), 1, 3), "L") = "riv") {
					Set tRivVersion = $LIST(list, i)
					Set tRequest.SOAPNamespace = tRequest.SOAPNamespace _ ":" _ tRivVersion
				}
			}
		}
		
		//Get WS-Addressing To SOAP Header
		Set txPath.PrefixMappings = "wsa http://www.w3.org/2005/08/addressing"
		Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/wsa:To", "text()", .tList)
		If (tList.Count() > 0) {
			Set txPathRes = tList.GetAt(1)
			Set tWsaTo = txPathRes.Value
			Set tRequest.WSATo = tWsaTo
			
			$$$TRACE("Value from SOAP Header WSA-To: " _ tWsaTo)
		}
		
		//Get WS-Addressing From SOAP Header
		Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/wsa:From/wsa:Address", "text()", .tList)
		If (tList.Count() > 0) {
			Set txPathRes = tList.GetAt(1)
			Set tWsaFrom = txPathRes.Value
			Set tRequest.WSAFrom = tWsaFrom
			
			$$$TRACE("Value from SOAP Header WSA-From: " _ tWsaFrom)
		}
		Else {
			Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/wsa:From", "text()", .tList)
			If (tList.Count() > 0) {
				Set txPathRes = tList.GetAt(1)
				Set tWsaFrom = txPathRes.Value
				Set tRequest.WSAFrom = tWsaFrom
			
				$$$TRACE("Value from SOAP Header WSA-From: " _ tWsaFrom)
			}
		}
		
		//Get WS-Addressing SOAP action
		Set tSC = txPath.EvaluateExpression("/soapenv:Envelope/soapenv:Header/wsa:Action", "text()", .tList)
		If (tList.Count() > 0) {
			Set txPathRes = tList.GetAt(1)
			Set tRequest.SOAPAction = txPathRes.Value
			
			$$$TRACE("Value from SOAP Header WSA-Action: " _ tRequest.SOAPAction)
		}
		
		//If WSA-To is empty but we have value in LogicalAddress, use it
		If ((tWsaTo = "") && (tLogicalAddress '= "")) { Set tWsaTo = tLogicalAddress }
		
		//If WSA-To existed, use that for routing, otherwise old SOAP Header To field
		If (tWsaTo '= "") {
			Set tRequest.To = tWsaTo
		}
		Else {
			Set tRequest.To = tSoapHeaderTo
		}
		
		//If WSA-From existed, use that for routing, otherwise old SOAP Header From field
		If (tWsaFrom '= "") {
			Set tRequest.From = tWsaFrom
		}
		Else {
			Set tRequest.From = tSoapHeaderFrom
		}
		
		//Get certificate from HTTP header
		#Dim tCommonName As %String
		#Dim tRawCertificate As %String
		Set tRawCertificate = ""
		Set tCommonName = ""
		If (tRequest.HTTPHeaders.GetAt("x-arr-clientcert") '= "") {
			//IIS
			Set tRawCertificate = $REPLACE(tRequest.HTTPHeaders.GetAt("x-arr-clientcert"), $Char(34), "")
		}
		ElseIf (tRequest.HTTPHeaders.GetAt("x-vp-auth-cert") '= "") {
			//Apache
			Set tRawCertificate = $REPLACE(tRequest.HTTPHeaders.GetAt("x-vp-auth-cert"), $Char(34), "")
			Set pos = $FIND(tRawCertificate, "-----BEGIN CERTIFICATE----- ")
			Set tRawCertificate = $EXTRACT(tRawCertificate, pos, *)
			Set pos = $FIND(tRawCertificate, " -----END")
			Set tRawCertificate = $EXTRACT(tRawCertificate, 1, pos-10)
		}
		$$$TRACE("tRawCertificate=" _ tRawCertificate)
		
		If (tRawCertificate '= "") {
			Set tCommonName = ##class(TP.Common.CertificateHelper).GetSerialNumber(tRawCertificate)
			$$$TRACE("Value from HTTP Header Common Name: " _ tCommonName)
		}
		
		If (tRequest.HTTPHeaders.GetAt("x-rivta-original-serviceconsumer-hsaid") '= "") {
			//From National Service Platform, overwrite Common Name
			Set tCommonName = tRequest.HTTPHeaders.GetAt("x-rivta-original-serviceconsumer-hsaid")
		}
		
		
		//If WSA-From existed, use that for routing, otherwise old SOAP Header From field
		If (tCommonName '= "") {
			Set tRequest.From = tCommonName
		}
		ElseIf (tWsaFrom '= "") {
			Set tRequest.From = tWsaFrom
		}
		Else {
			Set tRequest.From = tSoapHeaderFrom
		}
		
		If (..OneWay) {
			Set tSC = ..SendRequestAsync(..TargetConfigName,tRequest)
			Quit
		}
		
		Set tSC=..SendRequestSync(..TargetConfigName,tRequest,.tResponse)
		$$$TRACE("SendRequestSync error: " _ tSC)
		$$$TRACE("Response.Status: " _ tResponse.Status)
		If ($$$ISERR(tSC) || $$$ISERR(tResponse.Status)) {
				If ($$$ISERR(tSC)) {
					Do $system.Status.DecomposeStatus(tSC, .err)
				}
				Else {
					Do $system.Status.DecomposeStatus(tResponse.Status, .err)
				}
				set s = ""
				For i=1:1:$Get(err) { set s = s _ "Error(" _ i _ ") = " _ err(i) _ " / " }
			
				If (..SoapVersion = "1.2") {
					Set tSoapFault = ##class(%SOAP.Fault12).%New()
					Set tSoapFault.faultcode = $$$FAULTSender
					Set tSoapFault.faultstring = "Address not found in service catalog."
					Set tSoapFault.detail = err(1)
				
					//Do ..ReturnFault(tSoapFault)
					Set tSC = $$$ERROR($$$GeneralError,err(1))
				}
				Else {
					Set tSoapFault = ##class(%SOAP.Fault).%New()
					Set tSoapFault.faultcode = $$$FAULTClient
					Set tSoapFault.faultstring = "Address not found in service catalog."
					Set tSoapFault.detail = err(1)
					
					//Do ..ReturnFault(tSoapFault)
					Set tSC = $$$ERROR($$$GeneralError,err(1))
				}
			
				Quit
			
		}
		
		#; Adapter will reassemble response stream from message envelope/header and body streams; here we prepare the streams
		If $IsObject(tResponse.EnvelopeDoc) && ('$IsObject(tResponse.EnvelopeStream) || 'tResponse.EnvelopeStream.Size) {
			Set tEnvelopeStream=##class(%GlobalBinaryStream).%New()
			Set tSC=tResponse.EnvelopeDoc.OutputToLibraryStream(tEnvelopeStream,..%VDocFormat)
			Do:$$$ISERR(tSC) ..ReturnMethodStatusFault(tSC)
		} Else {
			Set tEnvelopeStream=tResponse.EnvelopeStream
		}
		If $IsObject(tResponse.Doc) && ('$IsObject(tResponse.Stream) || 'tResponse.Stream.Size) {
			Set pResponseBody=##class(%GlobalCharacterStream).%New()
			Set tSC=tResponse.EnvelopeDoc.OutputToLibraryStream(pResponseBody,..%VDocFormat)
			Do:$$$ISERR(tSC) ..ReturnMethodStatusFault(tSC)
		} Else {
			Set pResponseBody=tResponse.Stream
			Set:'$IsObject(pResponseBody) pResponseBody=##class(%GlobalCharacterStream).%New()
		}
		If ""'=tEnvelopeStream { Set pResponseBody.Attributes("EnvelopeStream")=tEnvelopeStream }
		Else { Set tEnvelopeStream=pResponseBody } ; just to attach headers to

		#; Pass along Status line and selected response HTTP headers
		Set tSL=""
		Set tDoNotPassThrough=","_$ZCVT(..%ExcludeResponseHttpHeaders,"L")_",content-length,"
		Set tHeaderKey=""
		For { 
			Set tHeaderKey=tResponse.HTTPHeaders.Next(tHeaderKey)  Quit:""=tHeaderKey  Set tHeaderLwr=$ZCVT(tHeaderKey,"L")
			Set:tDoNotPassThrough'[(","_tHeaderLwr_",") tEnvelopeStream.Attributes("HttpHeaders",tHeaderKey)=tResponse.HTTPHeaders.GetAt(tHeaderKey) ; no need to handle multiple on one line
			Set:tHeaderLwr="statusline" tSL=tResponse.HTTPHeaders.GetAt(tHeaderKey)
		}
		Set:tDoNotPassThrough'["statusline" tEnvelopeStream.Attributes("StatusLine")=tSL
	}
	Catch tException {
		Set tSC = tException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
